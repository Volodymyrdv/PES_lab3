import { useState } from 'react';
import FileUpload from '../FileUpload/FileUpload';
import PhoneList from '../PhoneList/PhoneList';
import ExpertProtocol from '../ExpertProtocol/ExpertProtocol';
import ExpertList from '../ExpertList/ExpertList';
import './App.css';

const App = () => {
  const [originalPhones, setOriginalPhones] = useState([]);
  const [currentExpert, setCurrentExpert] = useState('expert1');
  const [expertsCount, setExpertsCount] = useState(3);

  const [expertsData, setExpertsData] = useState({});

  const handleDataLoad = (data, expertsCount) => {
    setOriginalPhones(data);
    setExpertsCount(expertsCount);
    setCurrentExpert('expert1');

    const updatedExpertsData = {};
    for (let i = 1; i <= expertsCount; i++) {
      const expertKey = `expert${i}`;
      updatedExpertsData[expertKey] = {
        phones: [...data],
        protocol: []
      };
    }
    setExpertsData(updatedExpertsData);
  };

  const handleExpertChange = (expertId) => {
    setCurrentExpert(expertId);
  };

  const getCurrentExpertData = () => {
    return expertsData[currentExpert] || { phones: [], protocol: [] };
  };

  const handlePhoneReorder = (reorderedPhones, movedPhone, oldPosition, newPosition) => {
    const protocolEntry = `${movedPhone.phone} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∑ –ø–æ–∑–∏—Ü—ñ—ó ${
      oldPosition + 1
    } –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é ${newPosition + 1}`;

    setExpertsData((prevData) => ({
      ...prevData,
      [currentExpert]: {
        ...prevData[currentExpert],
        phones: reorderedPhones,
        protocol: [...prevData[currentExpert].protocol, protocolEntry]
      }
    }));
  };

  const handlePhoneRemove = (phoneToRemove) => {
    const currentData = expertsData[currentExpert];
    if (!currentData) return;

    const removedPosition =
      currentData.phones.findIndex((phone) => phone.id === phoneToRemove.id) + 1;
    const updatedPhones = currentData.phones.filter((phone) => phone.id !== phoneToRemove.id);
    const protocolEntry = `${phoneToRemove.phone} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –ø–æ–∑–∏—Ü—ñ—ó ${removedPosition}`;

    setExpertsData((prevData) => ({
      ...prevData,
      [currentExpert]: {
        ...prevData[currentExpert],
        phones: updatedPhones,
        protocol: [...prevData[currentExpert].protocol, protocolEntry]
      }
    }));
  };

  const exportRankingsToCSV = () => {
    if (Object.keys(expertsData).length === 0 || originalPhones.length === 0) {
      console.log('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É');
      return;
    }

    try {
      const headers = ['id'];
      for (let i = 1; i <= expertsCount; i++) {
        headers.push(i.toString());
      }

      const rows = [headers.join(',')];

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏, —è–∫—ñ —î —É –í–°–Ü–• –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤ (–Ω–µ –≤–∏–¥–∞–ª–µ–Ω—ñ –∂–æ–¥–Ω–∏–º)
      const activePhones = originalPhones.filter((originalPhone) => {
        return Object.keys(expertsData).every((expertKey) => {
          const expertData = expertsData[expertKey];
          return (
            expertData &&
            expertData.phones &&
            expertData.phones.some((phone) => phone.id === originalPhone.id)
          );
        });
      });

      activePhones.forEach((originalPhone) => {
        const row = [originalPhone.phone];

        for (let i = 1; i <= expertsCount; i++) {
          const expertKey = `expert${i}`;
          const expertData = expertsData[expertKey];

          if (expertData && expertData.phones) {
            const expertActivePhones = expertData.phones.filter((phone) =>
              activePhones.some((activePhone) => activePhone.id === phone.id)
            );

            const position = expertActivePhones.findIndex((phone) => phone.id === originalPhone.id);
            const rank = position !== -1 ? position + 1 : 'N/A';
            row.push(rank.toString());
          } else {
            row.push('N/A');
          }
        }

        rows.push(row.join(','));
      });

      const csvContent = rows.join('\n');
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');

      if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'expert_rankings_results.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);

        console.log(
          `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!\n\n–§–∞–π–ª: expert_rankings_results.csv\n–ï–∫—Å–ø–µ—Ä—Ç—ñ–≤: ${expertsCount}\n–ê–∫—Ç–∏–≤–Ω–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤: ${activePhones.length}`
        );
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ:', error);
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  };

  return (
    <div>
      {originalPhones.length === 0 ? (
        <FileUpload onDataLoad={handleDataLoad} />
      ) : (
        <div className='content'>
          <div className='expert-section'>
            <ExpertList
              currentExpert={currentExpert}
              onExpertChange={handleExpertChange}
              expertsCount={expertsCount}
            />
            <ExpertProtocol protocol={getCurrentExpertData().protocol} />
            <div className='export-section'>
              <button className='export-button' onClick={exportRankingsToCSV}>
                üìã –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è –≤ CSV
              </button>
            </div>
          </div>
          <PhoneList
            phones={getCurrentExpertData().phones}
            onPhoneReorder={handlePhoneReorder}
            onPhoneRemove={handlePhoneRemove}
          />
        </div>
      )}
    </div>
  );
};

export default App;
